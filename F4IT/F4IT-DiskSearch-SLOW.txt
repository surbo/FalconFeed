Updated 9/14/25 Version 0.1

Extraction Terms
================
SearchTerm | FilePath | SHA256 | Version | Created | LastModified | TimeStamp
===============================================================================

SIEM SEARCH
===========
#repo="falcon_for_it" event_type=ITQueryResult  
| replace(";", with="\n", field=result.FilePath)
| replace(";", with="\n", field=result.SHA256)
| replace(";", with="\n", field=result.Version)
| replace(";", with="\n", field=result.Created)
| replace(";", with="\n", field=result.LastModified)
| replace(";", with="\n", field=result.TimeStamp)
|replace(" ", with="", field=result.FilePath)
|replace(" ", with="", field=result.SHA256)
|replace(" ", with="", field=result.Version)
|replace(" ", with="", field=result.Created)
|replace(" ", with="", field=result.LastModified)
|replace(" ", with="", field=result.TimeStamp)
| table([hostname,result.SearchTerm,result.FilePath,result.SHA256,result.Version,result.Created,result.LastModified,result.TimeStamp])

=========================================================================================================================================

# =========================================================================
# ===              CONFIGURATION: EDITABLE SETTINGS                     ===
# =========================================================================
 
# === Enter the filename to search for here. No other changes are needed. ===
$SearchTerm = "*.mp3"
 
# =========================================================================
# ===        DO NOT EDIT BELOW THIS LINE UNLESS NEEDED                    ===
# =========================================================================
 
# Start a timer for the operation
$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
 
# Initialize an array to hold the data for all found files
$allFilesData = @()
 
# Use Get-ChildItem to search for files
try {
    Write-Output "Searching for files named '$SearchTerm' on C:\"
    $files = Get-ChildItem -Path "C:\" -Recurse -File -Filter $SearchTerm -ErrorAction SilentlyContinue
 
    if ($files.Count -gt 0) {
        # Add this line to output the count of files found
        Write-Output "[+] $($files.Count) files named '$SearchTerm' were found."
 
        $fileCount = 0
        foreach ($file in $files) {
            $fileCount++
            Write-Progress -Activity "Processing files" -Status "File $fileCount of $($files.Count)" -PercentComplete (($fileCount / $files.Count) * 100)
            
            # Initialize properties to null
            $filePath = $null
            $sha256 = $null
            $version = $null
            $created = $null
            $modified = $null
 
            try {
                # Get file path
                $filePath = $file.FullName
 
                # Get file properties. If an error occurs, the variable remains null.
                try { $sha256 = (Get-FileHash -Path $file.FullName -Algorithm SHA256 -ErrorAction Stop).Hash } catch { Write-Warning "Could not get SHA256 for $($file.FullName): $($_.Exception.Message)" }
                try { $version = (Get-Item -Path $file.FullName -ErrorAction Stop).VersionInfo.FileVersion } catch { Write-Warning "Could not get Version for $($file.FullName): $($_.Exception.Message)" }
                try { $created = $file.CreationTime.ToString('o') } catch { Write-Warning "Could not get Created Date for $($file.FullName): $($_.Exception.Message)" }
                try { $modified = $file.LastWriteTime.ToString('o') } catch { Write-Warning "Could not get Last Modified Date for $($file.FullName): $($_.Exception.Message)" }
 
                # Create an object with the collected data
                $fileData = [PSCustomObject]@{
                    FilePath = $filePath
                    SHA256 = $sha256
                    Version = $version
                    CreatedDate = $created
                    LastModified = $modified
                }
                # Add the object to the array
                $allFilesData += $fileData
 
            } catch {
                # This catch block is for unexpected errors, as individual property errors are now handled above.
                Write-Warning "An unexpected error occurred while processing $($file.FullName): $($_.Exception.Message)"
                $allFilesData += [PSCustomObject]@{
                    FilePath = $file.FullName
                    SHA256 = $null
                    Version = $null
                    CreatedDate = $null
                    LastModified = $null
                }
            }
        }
        
        Write-Progress -Activity "Processing files" -Completed
        
        # Aggregate and join all the collected data
        $SearchTermString = $SearchTerm
        
        # This is the key change to ensure null values are handled before joining
        $FilePathString = ($allFilesData.FilePath | ForEach-Object { if ($_) { $_ } else { "null" } }) -join ';'
        $SHA256String = ($allFilesData.SHA256 | ForEach-Object { if ($_) { $_ } else { "null" } }) -join ';'
        $VersionString = ($allFilesData.Version | ForEach-Object { if ($_) { $_ } else { "null" } }) -join ';'
        $CreatedDateString = ($allFilesData.CreatedDate | ForEach-Object { if ($_) { $_ } else { "null" } }) -join ';'
        $LastModifiedString = ($allFilesData.LastModified | ForEach-Object { if ($_) { $_ } else { "null" } }) -join ';'
        
        $TimestampString = (Get-Date).ToString('o')
 
        # Output the single pipe-delimited line
        Write-Output "$SearchTermString|$FilePathString|$SHA256String|$VersionString|$CreatedDateString|$LastModifiedString|$TimestampString"
 
    } else {
        # Add this line to output that no files were found
        Write-Output "[!] No files named '$SearchTerm' were found on C:\."
        
        # This block is for when no files are found.
        # It ensures that an empty pipe-delimited string is still output.
        $SearchTermString = $SearchTerm
        $FilePathString = "null"
        $SHA256String = "null"
        $VersionString = "null"
        $CreatedDateString = "null"
        $LastModifiedString = "null"
        $TimestampString = (Get-Date).ToString('o')
 
        Write-Output "$SearchTermString|$FilePathString|$SHA256String|$VersionString|$CreatedDateString|$LastModifiedString|$TimestampString"
    }
} catch {
    Write-Error "An error occurred during file search: $_"
}
 
# Stop the timer and output the total run time
$stopwatch.Stop()
Write-Output "Run Time: $($stopwatch.Elapsed.TotalSeconds.ToString()) seconds"
