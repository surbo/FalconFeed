Updated 9/14/25 Version 0.1

Extraction Terms
=================

URL | TITLE | Visit_Time | Visit_Count | Visited_From | Visit_Duration | Web_Browser | User_Profile | Browser_Profile | History_File
=================================================================================================================================================


SIEM SEARCH
===========
#repo="falcon_for_it" event_type=ITQueryResult  
| replace(";", with="\n", field=result.URL )
| replace(";", with="\n", field=result.Title)
| replace(";", with="\n", field=result.Visit_Time)
| replace(";", with="\n", field=result.Web_Browser)
| replace(";", with="\n", field=result.Visit_Count)
| replace(";", with="\n", field=result.Visit_Duration)
| replace(";", with="\n", field=result.User_Profile)
| replace(";", with="\n", field=result.Browser_Profile)
| replace(";", with="\n", field=result.History_File)
| replace(";", with="\n", field=result.Visited_From)
| replace(";", with="\n", field=result.Typed_Count)
| replace(";", with="\n", field=result.URL_Length)
| replace(";", with="\n", field=result.Record_ID)
| replace(";", with="\n", field=result.Visit_Type)
|replace(" ", with="", field=result.URL )
// |replace(" ", with="", field=result.Title)
// |replace(" ", with="", field=result.Visit_Time)
|replace(" ", with="", field=result.Web_Browser)
|replace(" ", with="", field=result.Visit_Count)
|replace(" ", with="", field=result.Visit_Duration)
|replace(" ", with="", field=result.User_Profile)
|replace(" ", with="", field=result.Browser_Profile)
|replace(" ", with="", field=result.History_File)
|replace(" ", with="", field=result.Visited_From)
|replace(" ", with="", field=result.Typed_Count)
|replace(" ", with="", field=result.URL_Length)
|replace(" ", with="", field=result.Record_ID)
|replace(" ", with="", field=result.Visit_Type)
| table([hostname,result.URL,result.Title,result.Visit_Time,result.Visit_Count,result.Visited_From,result.Visit_Duration,result.Web_Browser,result.User_Profile,result.History_File])
//Not User result.Typed_Count,result.URL_Length,result.Record_ID,result.Visit_Type

=============================================================================================================================================================================================

# This is a F4IT (Falcon for IT).
# It is designed to demonstrate how to correctly import data from a comma-separated CSV file
# and format it for F4IT. This script will download the required executable,
# run it to generate the data, and then clean up the files afterwards.
 
# ==============================================================================
# SCRIPT CONFIGURATION AREA
#
# Use this section to configure the script's behavior.
# ==============================================================================
 
# The hardcoded name for the file to be saved to disk.
$fileName = "BrowsingHistoryView.exe"
 
# The path where the file will be saved.
$savePath = "C:\"
$filePath = Join-Path -Path $savePath -ChildPath $fileName
 
# The name of the comma-separated file that will be generated by the executable.
$historyFile = "History.csv"
$historyFilePath = Join-Path -Path $savePath -ChildPath $historyFile
 
# Store the script's path in a safe variable for later use.
$scriptSelfPath = $PSCommandPath
 
# A comprehensive list of all possible fields to ensure consistent data output.
# The fields are now in the exact order as they appear in the CSV output from BrowsingHistoryView.exe
$fieldNames = @(
    "URL",
    "Title",
    "Visit Time",
    "Visit Count",
    "Visited From",
    "Visit Type",
    "Visit Duration",
    "Web Browser",
    "User Profile",
    "Browser Profile",
    "URL Length",
    "Typed Count",
    "History File",
    "Record ID"
)
 
# The sort order for the output based on 'Visit Time'. Options: "Ascending" or "Descending".
# The default is "Ascending" which is the oldest to newest time stamp.
$sortOrder = "Descending"
 
# ==============================================================================
# SCRIPT LOGIC
#
# Do not modify the code below this line unless you know what you're doing.
# ==============================================================================
 
Write-Host "--- Starting Test File Processing ---"
 
# Step 1: Download and extract the executable.
Write-Host "Downloading and extracting BrowsingHistoryView.exe from the web..."
try {
    # Specify the URL and target directory
    $url = "https://www.nirsoft.net/utils/browsinghistoryview.zip"
    $targetDirectory = $savePath
    $destinationPath = Join-Path -Path $targetDirectory -ChildPath "browsinghistoryview.zip"
 
    # Download the zip file
    Invoke-WebRequest -Uri $url -OutFile $destinationPath
 
    # Extract all contents from the zip file to the target directory
    Expand-Archive -Path $destinationPath -DestinationPath $targetDirectory -Force
 
    # Define the files to delete and their full paths
    $filesToDelete = @(
        (Join-Path -Path $targetDirectory -ChildPath "BrowsingHistoryView.chm"),
        (Join-Path -Path $targetDirectory -ChildPath "readme.txt")
    )
 
    # Delete the specified files
    Remove-Item -Path $filesToDelete -Force
 
    # Delete the downloaded zip file
    Remove-Item -Path $destinationPath
    Write-Host "File '$fileName' successfully downloaded and prepared in '$savePath'."
}
catch {
    Write-Error "An error occurred while downloading or extracting the file: $_"
    return
}
 
# Step 2: Run the downloaded file to generate the history CSV.
Write-Host "Executing '$fileName' to create history file..."
# Using the /scomma switch to output to a consistent comma-separated format.
$arguments = "/HistorySource 1", "/VisitTimeFilterType 5", "/VisitTimeFilterValue 15", "/StopIECacheTask 1", "/scomma `"$historyFilePath`""
Start-Process -FilePath $filePath -ArgumentList $arguments -NoNewWindow -Wait
 
# Step 3: Process the History.csv file.
Write-Host "Processing the '$historyFilePath' file..."
# Check if the CSV file exists.
if (Test-Path -Path $historyFilePath) {
    try {
        # Initialize a hash table to hold all data, grouped by field name.
        $fieldData = @{}
        foreach ($field in $fieldNames) {
            $fieldData[$field] = @()
        }
 
        # Import the CSV data using the correct comma delimiter.
        $historyData = Import-Csv -Path $historyFilePath -Delimiter ","
        
        # Sort the data based on the configured option.
        if ($sortOrder -eq "Descending") {
            $sortedHistoryData = $historyData | Sort-Object 'Visit Time' -Descending
        }
        else {
            $sortedHistoryData = $historyData | Sort-Object 'Visit Time'
        }
 
        # Iterate over each row (object) in the sorted data.
        foreach ($row in $sortedHistoryData) {
            # Loop through the hardcoded field names to ensure order and consistency.
            foreach ($field in $fieldNames) {
                # Check if the row object contains the current field.
                $value = if ($row.psobject.Properties.Name -contains $field) {
                    $row.$field
                } else {
                    # Add a placeholder for missing fields.
                    "null"
                }
                
                # Replace any pipe characters or commas in the data to prevent jumbling.
                $value = $value.replace('|', '[')
                $value = $value.replace(',', '^')
 
                # Add the value to the corresponding array in the hash table.
                $fieldData[$field] += $value
            }
        }
        
        Write-Host "Finished processing '$historyFilePath'."
        
        # Build the final output string by joining each field's data with semicolons.
        $URLString = ($fieldData["URL"] -join ';')
        $TitleString = ($fieldData["Title"] -join ';')
        $Visit_TimeString = ($fieldData["Visit Time"] -join ';')
        $Visit_CountString = ($fieldData["Visit Count"] -join ';')
        $Visited_FromString = ($fieldData["Visited From"] -join ';')
        $Visit_TypeString = ($fieldData["Visit Type"] -join ';')
        $Visit_DurationString = ($fieldData["Visit Duration"] -join ';')
        $Web_BrowserString = ($fieldData["Web Browser"] -join ';')
        $User_ProfileString = ($fieldData["User Profile"] -join ';')
        $Browser_ProfileString = ($fieldData["Browser Profile"] -join ';')
        $URL_LengthString = ($fieldData["URL Length"] -join ';')
        $Typed_CountString = ($fieldData["Typed Count"] -join ';')
        $History_FileString = ($fieldData["History File"] -join ';')
        $Record_IDString = ($fieldData["Record ID"] -join ';')
        
        # Output the single pipe-delimited line to the console.
        Write-Output "$URLString|$TitleString|$Visit_TimeString|$Visit_CountString|$Visited_FromString|$Visit_DurationString|$Web_BrowserString|$User_ProfileString|$Browser_ProfileString|$History_FileString|$Typed_CountString|$URL_LengthString|$Record_IDString|$Visit_TypeString"
 
    }
    catch {
        Write-Error "An error occurred while processing '$historyFilePath': $_"
    }
}
else {
    Write-Warning "Could not find '$historyFilePath' to process. Please ensure the file exists."
}
 
# Step 4: Cleanup - remove all generated files.
Write-Host "--- Starting Cleanup ---"
# Define the paths to be removed.
$filesToDelete = @($filePath, $historyFilePath)
 
foreach ($file in $filesToDelete) {
    if (Test-Path -Path $file) {
        Remove-Item -Path $file -Force
    }
}
Write-Host "Cleanup complete."
 
Write-Host "--- Test script complete. ---"
